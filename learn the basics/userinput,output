class AutoCompleteSystem {
private:
    unordered_map<string, int> sentenceFrequency; 
    string currentInput;                          

    
    vector<string> getTopSuggestions(const string& prefix) {
        vector<pair<string, int>> matchingSentences;

        
        for (const auto& entry : sentenceFrequency) {
            if (entry.first.find(prefix) == 0) { 
                matchingSentences.push_back(entry);
            }
        }

        
        sort(matchingSentences.begin(), matchingSentences.end(),
             [](const pair<string, int>& a, const pair<string, int>& b) {
                 return (a.second > b.second || (a.second == b.second && a.first < b.first));
             });

    
        vector<string> topResults;
        for (int i = 0; i < min(3, (int)matchingSentences.size()); ++i) {
            topResults.push_back(matchingSentences[i].first);
        }

        return topResults;
    }

public:
    
    AutoCompleteSystem(vector<string>& sentences, vector<int>& times) {
        for (int i = 0; i < sentences.size(); ++i) {
            sentenceFrequency[sentences[i]] = times[i];
        }
        currentInput = "";
    }

    vector<string> input(char c) {
        if (c == '#') {
            
            sentenceFrequency[currentInput]++;
            currentInput = ""; 
            return {};
        }

        
        currentInput += c;

        return getTopSuggestions(currentInput);
    }

};

