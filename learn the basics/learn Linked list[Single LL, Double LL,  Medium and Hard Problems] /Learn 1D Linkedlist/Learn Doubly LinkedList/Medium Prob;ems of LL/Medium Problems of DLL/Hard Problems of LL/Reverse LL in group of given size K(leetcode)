class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode*temp=head;
        ListNode*prev=NULL;
        if(head==nullptr || head->next==nullptr)
           return head;
        while(temp!=nullptr){
            ListNode*front=temp->next;
            temp->next=prev;
            prev=temp;
            temp=front;
        }
        return prev;
    }
    ListNode* findKth(ListNode*temp,int k){
        while(temp!=NULL && k>1){
            k--;
            temp=temp->next;
        }
        return temp;
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode*temp=head;
        ListNode*prev=NULL;
        while(temp!=NULL){
            ListNode*kthnode=findKth(temp,k);
            if(kthnode==NULL){
                if(prev)prev->next=temp;
                break;
            }
            ListNode*nextnode=kthnode->next;
            kthnode->next=nullptr;
            reverseList(temp);
            if(temp==head){
                head=kthnode;
            }
            else{
                prev->next=kthnode;
            }
            prev=temp;
            temp=nextnode;
        
        }
        return head;
    }
};
