class Solution {
public:
    
    bool isSafe(int node, vector<int>& color, vector<vector<int>>& adj, int c) {
        for (int neighbor : adj[node]) {
            if (color[neighbor] == c) 
                return false; 
        }
        return true;
    }

    
    bool solve(int node, vector<int>& color, vector<vector<int>>& adj, int m, int v) {
        if (node == v) 
            return true; 

        for (int c = 1; c <= m; c++) {
            if (isSafe(node, color, adj, c)) {
                color[node] = c;  // Assign color
                if (solve(node + 1, color, adj, m, v)) 
                    return true;  // Proceed to next vertex
                color[node] = 0;  // Backtrack
            }
        }
        return false;
    }

    bool graphColoring(int v, vector<pair<int, int>>& edges, int m) {
        
        vector<vector<int>> adj(v);
        for (auto& edge : edges) {
            adj[edge.first].push_back(edge.second);
            adj[edge.second].push_back(edge.first);
        }

        vector<int> color(v, 0);

        
        return solve(0, color, adj, m, v);
    }
};
