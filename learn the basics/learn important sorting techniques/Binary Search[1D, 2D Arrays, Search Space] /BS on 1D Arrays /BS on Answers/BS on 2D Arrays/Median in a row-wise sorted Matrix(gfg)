// User function template for C++

class Solution {
  public:
    int median(vector<vector<int>> &mat) {
        int n = mat.size();    // Number of rows
        int m = mat[0].size(); // Number of columns
        int low = mat[0][0], high = mat[0][0];

        
        for (int i = 0; i < n; i++) {
            low = min(low, mat[i][0]);
            high = max(high, mat[i][m - 1]);
        }

        int median_pos = (n * m) / 2; 

        
        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = 0;

            
            for (int i = 0; i < n; i++) {
                count += upper_bound(mat[i].begin(), mat[i].end(), mid) - mat[i].begin();
            }

        
            if (count > median_pos) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
};
