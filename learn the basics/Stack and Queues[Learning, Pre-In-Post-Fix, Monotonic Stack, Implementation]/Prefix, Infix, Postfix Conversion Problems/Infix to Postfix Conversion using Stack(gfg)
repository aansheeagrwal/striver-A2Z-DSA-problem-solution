
class Solution {
  public:
    int precedence(char op) {
        if(op == '^') return 3;
        if(op == '*' || op == '/') return 2;
        if(op == '+' || op == '-') return 1;
        return 0;
    }

    string infixToPostfix(string& s) {
        string result;
        stack<char> st;

        for(char c : s) {
            if(isalnum(c)) {
                result += c; // Operand goes directly to result
            }
            else if(c == '(') {
                st.push(c);
            }
            else if(c == ')') {
                while(!st.empty() && st.top() != '(') {
                    result += st.top();
                    st.pop();
                }
                if(!st.empty()) st.pop(); // Pop '('
            }
            else { // Operator
                while(!st.empty() && precedence(st.top()) >= precedence(c)) {
                    result += st.top();
                    st.pop();
                }
                st.push(c);
            }
        }

        // Pop remaining operators
        while(!st.empty()) {
            result += st.top();
            st.pop();
        }

        return result;
    }
};
